{"version":3,"sources":["logo.svg","component/connecter.js","component/panel.js","component/controller.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Connecter","props","joinRoom","token","leaveRoom","init_token","state","window","location","origin","console","log","Math","random","toString","substr","id","style","z_index","position","value","this","size","renderAs","React","Component","Panel","socket","on","data","message","url","match","open","setSocketListeners","className","Controller","sendMessage","URLSearchParams","search","get","handleChange","bind","handleSubmit","event","setState","target","preventDefault","onSubmit","type","placeholder","name","onChange","required","htmlFor","socket_address","io","App","ishost","rooms","indexOf","emit","filter","r","body","timeStamp","Date","now","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1b8eba0b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport QRCode from 'qrcode.react'\n\nclass Connecter extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        const {joinRoom, leaveRoom} = this.props\n        const token = this.init_token()\n        this.state = {token: window.location.origin + '?token=' + token};\n        joinRoom(token)\n        console.log(this.state.token)\n    }\n\n    init_token() {\n        return Math.random().toString(36).substr(2);\n    }\n\n\n    render() {\n        return (\n            <section id=\"banner\" style={{z_index: -1, position: 'relative'}}>\n                <QRCode value={this.state.token} size={512} renderAs={'svg'} />\n            </section>\n        );\n    }\n}\n\nexport default Connecter;\n","import React from 'react';\nimport './panel.css';\n\nclass Panel extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const {socket} = this.props\n        this.socket = socket\n    }\n\n    setSocketListeners() {\n        this.socket.on('message', (data) => {\n            console.log('message', data.message)\n        })\n\n        this.socket.on('message_sent', (message) => {\n            console.log('message_sent', message)\n            let url = message['body']['link'];\n            if (!url.match(/^http?:\\/\\//i) && !url.match(/^https?:\\/\\//i)) {\n                url = 'http://' + url;\n            }\n            window.open(url, \"_blank\");\n        })\n    }\n\n\n    componentDidMount() {\n        this.setSocketListeners()\n    }\n\n    render() {\n        return (\n            <div>\n                <div className={\"bg-img\"}></div>\n            </div>\n\n        );\n    }\n}\n\nexport default Panel;\n","import React from 'react';\nimport './controller.css';\n\nclass Controller extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        const {joinRoom, sendMessage} = this.props\n        const urlParams = new URLSearchParams(window.location.search);\n        const token = urlParams.get('token');\n        joinRoom(token)\n        console.log(token);\n\n        this.state = {value: '', token: token};\n        this.sendMessage = sendMessage\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.sendMessage({'link': this.state.value}, this.state.token);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"form__group field\">\n                    <input type=\"input\" className=\"form__field\" placeholder=\"Name\" name=\"Link\" id='name'\n                           value={this.state.value} onChange={this.handleChange} required/>\n                    <label htmlFor=\"name\" className=\"form__label\">Link</label>\n                </div>\n                <br/>\n                <br/>\n                <button className=\"btn\" type=\"submit\">\n                    Submit\n                </button>\n            </form>\n        );\n    }\n}\n\nexport default Controller;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Connecter from \"./component/connecter\"\nimport Panel from \"./component/panel\";\nimport Controller from \"./component/controller\";\nimport io from 'socket.io-client'\n\n\nlet socket_address = window.location.origin\nconst socket = io(socket_address)\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const urlParams = new URLSearchParams(window.location.search);\n        const token = urlParams.get('token');\n        this.state = {ishost: !token, rooms: []};\n        this.joinRoom = this.joinRoom.bind(this)\n        this.leaveRoom = this.leaveRoom.bind(this)\n    }\n\n\n    joinRoom(token) {\n        if (this.state.rooms.indexOf(token) === -1) {\n            this.setState({rooms: [...this.state.rooms, token]}, () => {\n                socket.emit('join_room', {token})\n            })\n        }\n    }\n\n    leaveRoom(token) {\n        this.setState({rooms: this.state.rooms.filter((r) => r !== token)})\n    }\n\n    sendMessage(message, token) {\n        socket.emit(\n            'send_message',\n            {\n                token,\n                body: message,\n                timeStamp: Date.now()\n            }\n        )\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    {this.state.ishost === true && (\n                        <div>\n                            <Panel socket={socket}/>\n                            <Connecter joinRoom={this.joinRoom}\n                                       leaveRoom={this.leaveRoom}/>\n                        </div>\n                    )}\n                    {this.state.ishost === false && (\n                        <Controller joinRoom={this.joinRoom}\n                                    sendMessage={this.sendMessage}/>\n                    )}\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}