{"version":3,"sources":["component/connecter.js","component/panel.js","component/controller.js","App.js","serviceWorker.js","index.js"],"names":["Connecter","props","joinRoom","token","leaveRoom","init_token","state","window","location","origin","console","log","Math","random","toString","substr","id","style","z_index","position","className","height","alt","src","value","this","width","renderAs","href","target","React","Component","Panel","socket","on","data","message","url","match","open","setSocketListeners","Controller","sendMessage","URLSearchParams","search","get","handleChange","bind","handleSubmit","event","setState","preventDefault","onSubmit","type","placeholder","name","onChange","required","htmlFor","socket_address","io","App","ishost","rooms","indexOf","emit","filter","r","body","timeStamp","Date","now","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.4abf7ab6.chunk.js","sourcesContent":["import React from 'react';\nimport QRCode from 'qrcode.react'\n\nclass Connecter extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        const {joinRoom, leaveRoom} = this.props\n        const token = this.init_token()\n        this.state = {token: window.location.origin + '?token=' + token};\n        joinRoom(token)\n        console.log(this.state.token)\n    }\n\n    init_token() {\n        return Math.random().toString(36).substr(2);\n    }\n\n\n    render() {\n        return (\n            <section id=\"banner\" style={{z_index: -1, position: 'relative'}}>\n                <div className={\"snapshare\"}>\n                    <img height={\"100%\"} alt={\"snapshare\"}\n                         src={\"https://raw.githubusercontent.com/voidful/SnapShare/master/website/public/logo512.png\"}>\n                    </img>\n                    <h2 className={\"intro\"}>SnapShare</h2>\n                </div>\n                <QRCode value={this.state.token} width={\"90%\"} height={\"90%\"} renderAs={'svg'}/>\n                <div className={\"intro\"}>{\"Send the link via your phone. \\n Scan, Paste and Magic ÔºÅ\"}</div>\n                <footer>\n                    <a href=\"https://github.com/voidful/SnapShare\" target=\"_blank\">\n                        <i className=\"icon-social-github icons\"></i>\n                    </a>\n                </footer>\n            </section>\n        );\n    }\n}\n\nexport default Connecter;\n","import React from 'react';\nimport './panel.css';\n\nclass Panel extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const {socket} = this.props\n        this.socket = socket\n    }\n\n    setSocketListeners() {\n        this.socket.on('message', (data) => {\n            console.log('message', data.message)\n        })\n\n        this.socket.on('message_sent', (message) => {\n            console.log('message_sent', message)\n            let url = message['body']['link'];\n            if (!url.match(/^http?:\\/\\//i) && !url.match(/^https?:\\/\\//i)) {\n                url = 'http://' + url;\n            }\n            window.open(url, \"_tab\", 'noopener,noreferrer');\n        })\n    }\n\n\n    componentDidMount() {\n        this.setSocketListeners()\n    }\n\n    render() {\n        return (\n            <div>\n                <div className={\"bg-img\"}></div>\n            </div>\n\n        );\n    }\n}\n\nexport default Panel;\n","import React from 'react';\nimport './controller.css';\n\nclass Controller extends React.Component {\n\n\n    constructor(props) {\n        super(props);\n        const {joinRoom, sendMessage} = this.props\n        const urlParams = new URLSearchParams(window.location.search);\n        const token = urlParams.get('token');\n        joinRoom(token)\n        console.log(token);\n\n        this.state = {value: '', token: token};\n        this.sendMessage = sendMessage\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        this.sendMessage({'link': this.state.value}, this.state.token);\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"form__group field\">\n                    <input type=\"input\" className=\"form__field\" placeholder=\"Name\" name=\"Link\" id='name'\n                           value={this.state.value} onChange={this.handleChange} required/>\n                    <label htmlFor=\"name\" className=\"form__label\">Link</label>\n                </div>\n                <br/>\n                <br/>\n                <button className=\"btn\" type=\"submit\">\n                    Submit\n                </button>\n            </form>\n        );\n    }\n}\n\nexport default Controller;\n","import React from 'react';\nimport './App.css';\nimport Connecter from \"./component/connecter\"\nimport Panel from \"./component/panel\";\nimport Controller from \"./component/controller\";\nimport io from 'socket.io-client'\n\n\nlet socket_address = window.location.origin\nconst socket = io(socket_address)\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const urlParams = new URLSearchParams(window.location.search);\n        const token = urlParams.get('token');\n        this.state = {ishost: !token, rooms: []};\n        this.joinRoom = this.joinRoom.bind(this)\n        this.leaveRoom = this.leaveRoom.bind(this)\n    }\n\n\n    joinRoom(token) {\n        if (this.state.rooms.indexOf(token) === -1) {\n            this.setState({rooms: [...this.state.rooms, token]}, () => {\n                socket.emit('join_room', {token})\n            })\n        }\n    }\n\n    leaveRoom(token) {\n        this.setState({rooms: this.state.rooms.filter((r) => r !== token)})\n    }\n\n    sendMessage(message, token) {\n        socket.emit(\n            'send_message',\n            {\n                token,\n                body: message,\n                timeStamp: Date.now()\n            }\n        )\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    {this.state.ishost === true && (\n                        <div>\n                            <Panel socket={socket}/>\n                            <Connecter joinRoom={this.joinRoom}\n                                       leaveRoom={this.leaveRoom}/>\n                        </div>\n                    )}\n                    {this.state.ishost === false && (\n                        <Controller joinRoom={this.joinRoom}\n                                    sendMessage={this.sendMessage}/>\n                    )}\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}